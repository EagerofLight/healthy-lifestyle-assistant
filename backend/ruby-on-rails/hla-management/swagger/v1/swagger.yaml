openapi: 3.0.0
info:
  title: HLA Management API
  version: 1.0.0
  description:
servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, admin, super_admin]
          example: user
        status:
          type: string
          example: active
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
    UserInput:
      type: object
      properties:
        user:
          type: object
          properties:
            name:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: user@example.com
            role:
              type: string
              enum: [user, admin, super_admin]
              example: user
            status:
              type: string
              example: active
            password:
              type: string
              format: password
              example: password123
      required:
        - user
    Error:
      type: object
      properties:
        error:
          type: object
          additionalProperties: true
          example: 
            email: ["can't be blank"]
            password: ["is too short (minimum is 6 characters)"]

security:
  - BearerAuth: []

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users (requires admin privileges)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - Insufficient permissions
        '500':
          description: Internal server error

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      tags:
        - Users
      summary: Update user
      description: Update a user's information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid input
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: User not found
        '422':
          description: Unprocessable entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error

    patch:
      tags:
        - Users
      summary: Partially update user
      description: Partially update a user's information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - Invalid input
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: User not found
        '422':
          description: Unprocessable entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user (requires appropriate permissions)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: User not found
        '500':
          description: Internal server error

  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: user@example.com
                    password:
                      type: string
                      format: password
                      example: password123
                  required:
                    - email
                    - password
              required:
                - user
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid credentials
        '422':
          description: Unprocessable entity - Validation errors

  /signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      format: email
                      example: user@example.com
                    password:
                      type: string
                      format: password
                      example: password123
                    password_confirmation:
                      type: string
                      format: password
                      example: password123
                  required:
                    - email
                    - password
                    - password_confirmation
              required:
                - user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          description: Unprocessable entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    delete:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and revoke JWT token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized - Authentication required